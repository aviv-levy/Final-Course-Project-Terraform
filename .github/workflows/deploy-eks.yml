name: Deploy Terraform EKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose Terraform Action"
        required: true
        type: choice
        options:
          - Apply
          - Destroy

env:
  AWS_REGION: "eu-west-1"
  EKS_CLUSTER_NAME: "Freestyle"
  AWS_ACCOUNT_PROD: "017923816312"

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        

        
      - name: Log Deployment Start
        run: |
          echo "======================================"
          echo "Starting deployment to Prod environment"
          echo "Target Account: ${{ env.AWS_ACCOUNT_PROD }}"
          echo "Time: $(date)"
          echo "Triggered by: ${{ github.actor }}"
          echo "======================================"

      - name: Configure AWS Credentials - Main Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_PROD }}:role/GithubActionsAvivLevyDeployRole
          role-session-name: GitHubToMainAccount
          
      - name: Log AWS Main Account Connection
        run: |
          echo "Connected to main AWS account"
          aws sts get-caller-identity
          

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6
          
      - name: Ensure S3 Backend Bucket Exists
        run: |
          echo "Checking if S3 backend bucket exists..."
          BUCKET_NAME="freestyle-terraform"
          
          # Check if bucket exists
          if aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null; then
            echo "‚úÖ Bucket $BUCKET_NAME exists"
          else
            echo "üì¶ Creating bucket $BUCKET_NAME..."
            aws s3 mb "s3://$BUCKET_NAME" --region ${{ env.AWS_REGION }}
            
            echo "üîí Enabling versioning..."
            aws s3api put-bucket-versioning \
              --bucket "$BUCKET_NAME" \
              --versioning-configuration Status=Enabled
            
            echo "üîê Enabling encryption..."
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET_NAME" \
              --server-side-encryption-configuration '{
                "Rules": [{
                  "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }]
              }'
            
            echo "üö´ Blocking public access..."
            aws s3api put-public-access-block \
              --bucket "$BUCKET_NAME" \
              --public-access-block-configuration \
                BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            
            echo "‚úÖ Bucket $BUCKET_NAME created and configured"
          fi

      - name: Terraform Init
        working-directory: ./
        run: |
          echo "Initializing Terraform..."
          terraform init
          
      - name: Terraform Validate
        working-directory: ./
        run: |
          echo "Validating Terraform configuration..."
          terraform validate


      - name: Terraform Apply OR Destroy
        working-directory: ./
        run: |
          if [ "${{ github.event.inputs.environment }}" = "Apply" ]; then
          echo "Applying Terraform changes..."
          terraform apply -auto-approve

          elif [ "${{ github.event.inputs.environment }}" = "Destroy" ]; then
          echo "Destroying Terraform..."
          terraform destroy -auto-approve
          fi

      - name: Capture Outputs
        working-directory: ./
        run: |
          echo "======================================"
          echo "Deployment Outputs:"
          if terraform output -json > outputs.json 2>/dev/null; then
            cat outputs.json | jq . || echo "JQ parsing failed, showing raw output:" && cat outputs.json
          else
            echo "Failed to capture terraform outputs, showing direct output:"
            terraform output || echo "No outputs available"
          fi
          echo "======================================"
          
      - name: Log Deployment Complete
        run: |
          echo "======================================"
          echo "Deployment to Prod completed successfully!"
          echo "Account: ${{ env.AWS_ACCOUNT_PROD }}"
          echo "Time: $(date)"
          echo "======================================"

      - name: Deployment Failure Notification
        if: failure()
        run: |
          echo "======================================"
          echo "‚ùå DEPLOYMENT FAILED for Prod"
          echo "Check the logs above for error details"
          echo "Time: $(date)"
          echo "======================================"


  splunk:
    needs: terraform
    runs-on: ubuntu-latest
    environment: ENV

    steps:
      - name: Configure AWS Credentials - Main Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_PROD }}:role/GithubActionsAvivLevyDeployRole
          role-session-name: GitHubToMainAccount

      - name: Setup kubectl & auth to EKS üß©
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          EKS_CLUSTER_NAME: ${{ env.EKS_CLUSTER_NAME }}
        run: |
            aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "$AWS_REGION"
            kubectl version --client=true

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Add and Install Splunk helm
        env:
          SPLUNK_ACCESS_TOKEN: ${{ secrets.SPLUNK_TOKEN }}
          EKS_CLUSTER_NAME: ${{ env.EKS_CLUSTER_NAME }}
        run: |
          helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart
          helm repo update
          helm install splunk-otel-collector --set="cloudProvider=aws,distribution=eks,splunkObservability.accessToken=${SPLUNK_ACCESS_TOKEN},clusterName=${EKS_CLUSTER_NAME},splunkObservability.realm=eu0,gateway.enabled=false,splunkObservability.profilingEnabled=true,environment=prod,operatorcrds.install=true,operator.enabled=true,agent.discovery.enabled=true" splunk-otel-collector-chart/splunk-otel-collector


        

